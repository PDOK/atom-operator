/*
MIT License

Copyright (c) 2024 Publieke Dienstverlening op de Kaart

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

package v3

import (
	"net/url"
	"strings"

	smoothoperatormodel "github.com/pdok/smooth-operator/model"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var baseURL string
var host string
var blobEndpoint string

// AtomSpec defines the desired state of Atom.
type AtomSpec struct {
	// Optional lifecycle settings
	Lifecycle *smoothoperatormodel.Lifecycle `json:"lifecycle,omitempty"`

	// Service specification
	Service Service `json:"service"`
}

// Service defines the service configuration for the Atom feed
type Service struct {
	// BaseURL of the Atom service. Will be suffixed with index.xml for the index.
	// +kubebuilder:validation:Pattern:="https?://"
	BaseURL string `json:"baseUrl"`

	// Language of the service
	// +kubebuilder:default:="nl"
	// +kubebuilder:validation:MinLength:=2
	Lang string `json:"lang"`

	// Optional link to a stylesheet used in pages generated by the service.
	Stylesheet *string `json:"stylesheet,omitempty"`

	// Title of the service
	// +kubebuilder:validation:MinLength:=1
	Title string `json:"title"`

	// Subtitle of the service
	// +kubebuilder:validation:MinLength:=1
	Subtitle string `json:"subtitle"`

	// Reference to a CR of Kind OwnerInfo
	OwnerInfoRef string `json:"ownerInfoRef"`

	// Optional links to metadata of the service
	ServiceMetadataLinks *MetadataLink `json:"serviceMetadataLinks,omitempty"`

	// Additional links
	// +kubebuilder:validation:MinItems:=1
	Links []Link `json:"links,omitempty"`

	// License used
	// +kubebuilder:validation:MinLength:=1
	Rights string `json:"rights"`

	// DatasetFeeds in this service
	// +kubebuilder:validation:MinItems:=1
	DatasetFeeds []DatasetFeed `json:"datasetFeeds"`
}

// Link represents a link in the service or dataset feed
type Link struct {
	// Actual href of the link
	// +kubebuilder:validation:Pattern:="https?://"
	Href string `json:"href"`

	// Relation (type) of the link, for example: describedby, self or alternate
	// +kubebuilder:validation:MinLength:=1
	Rel string `json:"rel"`

	// ContentType of the link, for example: application/pdf or text/plain
	// +kubebuilder:validation:Pattern:=`^[a-z]+\/[a-z]+(?:\+[a-z]+)?$`
	Type string `json:"type"`

	// Optional language of the link. If omitted the language of the service is used
	// +kubebuilder:validation:MinLength:=2
	Hreflang *string `json:"hreflang,omitempty"`

	// Optional title of the link
	// +kubebuilder:validation:MinLength:=1
	Title *string `json:"title,omitempty"`
}

// DatasetFeed represents individual dataset feeds within the Atom service
type DatasetFeed struct {
	// TechnicalName of the feed. Can be seen as an identifier for the feed.
	// +kubebuilder:validation:MinLength:=1
	TechnicalName string `json:"technicalName"`

	// Title of the feed
	// +kubebuilder:validation:MinLength:=1
	Title string `json:"title"`

	// Subtitle of the feed
	// +kubebuilder:validation:MinLength:=1
	Subtitle string `json:"subtitle"`

	// Optional links to metadata of the dataset
	DatasetMetadataLinks *MetadataLink `json:"datasetMetadataLinks,omitempty"`

	// Optional additional links
	// +kubebuilder:validation:MinItems:=1
	Links []Link `json:"links,omitempty"`

	// Author of the dataset, note that this is not the same as the author of the service.
	Author smoothoperatormodel.Author `json:"author"`

	// SpatialDatasetIdentifierCode
	// +kubebuilder:validation:Pattern:=`^[0-9a-zA-Z]{8}\-[0-9a-zA-Z]{4}\-[0-9a-zA-Z]{4}\-[0-9a-zA-Z]{4}\-[0-9a-zA-Z]{12}$`
	SpatialDatasetIdentifierCode *string `json:"spatialDatasetIdentifierCode,omitempty"`

	// SpatialDatasetIdentifierNamespace
	// +kubebuilder:validation:Format:=uri
	SpatialDatasetIdentifierNamespace *string `json:"spatialDatasetIdentifierNamespace,omitempty"`

	// List of entries for this dataset feed, typically used for downloads
	// +kubebuilder:validation:MinItems:=1
	Entries []Entry `json:"entries"`
}

// MetadataLink represents a link in the service or dataset feed
type MetadataLink struct {
	// UUID of the metadata record
	// +kubebuilder:validation:Pattern:=`^[0-9a-zA-Z]{8}\-[0-9a-zA-Z]{4}\-[0-9a-zA-Z]{4}\-[0-9a-zA-Z]{4}\-[0-9a-zA-Z]{12}$`
	MetadataIdentifier string `json:"metadataIdentifier"`

	// Metadata templates to use
	// +kubebuilder:validation:MinItems:=1
	Templates []string `json:"templates"`
}

// Entry represents an entry within a dataset feed, typically for downloads
// +kubebuilder:validation:XValidation:message="Content field is required when 2 or more download links are given.",rule="self.downloadlinks.size() == 1 || (has(self.content) && self.content.size() > 0)"
type Entry struct {
	// TechnicalName of the Entry, used as the ID
	// +kubebuilder:validation:MinLength:=1
	TechnicalName string `json:"technicalName"`

	// Optional title of the Entry
	// +kubebuilder:validation:MinLength:=1
	Title *string `json:"title,omitempty"`

	// Optional content description of the links. Required when more than 1 link is given
	// +kubebuilder:validation:MinLength:=1
	Content *string `json:"content,omitempty"`

	// List of download links within this entry
	// +kubebuilder:validation:MinItems:=1
	DownloadLinks []DownloadLink `json:"downloadlinks"`

	// Last updated timestamp
	// +kubebuilder:validation:Format:=date-time
	Updated metav1.Time `json:"updated"`

	// Bounding box of the entry
	Polygon Polygon `json:"polygon"`

	// Spatial Reference System
	SRS SRS `json:"srs"`
}

// DownloadLink specifies download information for entries
type DownloadLink struct {
	// URL to the data
	// +kubebuilder:validation:MinLength:=1
	Data string `json:"data"`

	// Optional relation if the link, for example: describedby, self or alternate
	// +kubebuilder:validation:MinLength:=1
	Rel *string `json:"rel,omitempty"`

	// Optional. Datetime the data in the dataset applies to, for use in historical datasets
	// +kubebuilder:validation:Format:=date-time
	Time *string `json:"time,omitempty"`

	// Optional boundingbox of the data. If omitted the bounding box of the parent entry is used
	BBox *smoothoperatormodel.BBox `json:"bbox,omitempty"`
}

// Polygon describes the bounding box of an entry or download
type Polygon struct {
	BBox smoothoperatormodel.BBox `json:"bbox"`
}

// SRS describes the Spatial Reference System for an entry
type SRS struct {
	// URI of the SRS
	// +kubebuilder:validation:Pattern:="https?://"
	URI string `json:"uri"`

	// Name of the SRS
	// +kubebuilder:validation:MinLength:=1
	Name string `json:"name"`
}

// +kubebuilder:object:root=true
// +kubebuilder:conversion:hub
// +kubebuilder:subresource:status
// versionName=v3
// +kubebuilder:storageversion
// +kubebuilder:resource:categories=pdok

// Atom is the Schema for the atoms API.
type Atom struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   AtomSpec                            `json:"spec"`
	Status *smoothoperatormodel.OperatorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AtomList contains a list of Atom.
type AtomList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Atom `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Atom{}, &AtomList{})
}

func SetBaseURL(atomBaseURL string) {
	baseURL = strings.TrimSuffix(atomBaseURL, "/")
}

func GetBaseURL() string {
	return baseURL
}

func SetHost(atomHost string) {
	host = strings.TrimSuffix(atomHost, "/")
}

func GetHost() string {
	return host
}

func SetBlobEndpoint(atomBlobEndpoint string) {
	blobEndpoint = atomBlobEndpoint
}

func GetBlobEndpoint() string {
	return blobEndpoint
}

func (r *Atom) GetBaseURLPath() string {
	url, _ := url.Parse(r.Spec.Service.BaseURL)
	return strings.Replace(url.Path, "/", "", 1)
}

func (r *Atom) GetDownloadLinks() (downloadLinks []DownloadLink) {
	for _, datasetFeed := range r.Spec.Service.DatasetFeeds {
		for _, entry := range datasetFeed.Entries {
			downloadLinks = append(downloadLinks, entry.DownloadLinks...)
		}
	}
	return
}

func (dl *DownloadLink) GetBlobPrefix() string {
	index := strings.LastIndex(dl.Data, "/")
	return dl.Data[:index]
}

func (dl *DownloadLink) GetBlobName() string {
	index := strings.LastIndex(dl.Data, "/") + 1
	return dl.Data[index:]
}
